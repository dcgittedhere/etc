#! /bin/bash

bld=$(tput bold)
nrm=$(tput sgr0)

function gitConfig {
    printf "${bld}git config...${nrm}\n"
    command -v git >/dev/null 2>&1 && { echo >&2 "Git is not installed. Installing git..."; echo "running 'sudo apt-get install git'"; } #sudo apt-get install git; }
    printf "Configuring ~/.emacs.d/init.el ...\n"
    printf "${bld}git config done.${nrm}\n"

}

function emacsConfig {
    printf "${bld}emacs config...${nrm}\n"
    command -v emacs >/dev/null 2>&1 && { echo >&2 "Emacs is not installed. Installing emacs..."; echo "running 'sudo apt-get install git'"; } #sudo apt-get install emacs; }
    printf "Configuring ~/.emacs.d/init.el ...\n"
    printf "${bld}emacs config done.${nrm}\n"

}
#clear

EXITCODE=0
printf "Greetings, $USER!\n"
printf """
This script will set up key elements of DC's work environment. The following packages will be installed and configured: ${bld}emacs, git${nrm}.

For successful execution, the script will require at various points: ${bld}apt-get, sudo${nrm}.

"""
printf "Set up the environment? (Y/n) "

#read consent
consent="y"
consent=${consent^^}


if [ $consent = "Y" ];
then
    printf "\n${bld}$USER says yes!${nrm}\n\n"
printf "Initializing configuration...\n"

    gitConfig
    emacsConfig
    
    printf "\nConfiguration script exitting with code $EXITCODE.\n"

    
else
    printf "$USER says no :[ ...\n"
    $EXITCODE=1
    printf "\nConfiguration script exitting with code $EXITCODE.\n"
fi
